package model;

import model.interfaces.*;

// Clase Hechicero que hereda de la clase Magico y representa un personaje hechicero en el juego
// üßô‚Äç‚ôÇÔ∏è
public class Hechicero extends Magica implements Magico, Defendible {
    // Constantes _________________________________
    private static final int COSTO_HECHIZO = 10;
    private static final int COSTO_DEFENSA = 30;

    // Atributos ____________________
    private int maxDefensa = 20;
    private int maxDa√±oHechizo = 15;
    private int maxMana = 60;
    private int maxSalud = 40;
    private int maxDa√±o = 5;
    private int maxConcentracion = 60;

    private int mana;
    private int concentracion;
    private int defensa;
    private int da√±oHechizo;

    // Constructor __________________________________________________
    public Hechicero(String nombre) {
        super(nombre, 1, 40, 5); // Salud y da√±o inicial
        this.mana = maxMana;
        this.concentracion = maxConcentracion;
        this.defensa = maxDefensa;
        this.da√±oHechizo = maxDa√±oHechizo;
    }

    // M√©todos _________________________________________________________________
    /**
     *  Se defiende, reduciendo la concentraci√≥n del hechicero.
     *  Si no tiene suficiente concentraci√≥n, no puede defenderse.
     *  Ya que la defensa es m√°gica, se suma a la salud del hechicero.
     */
    @Override
    public void defender() {
        System.out.println("üõ°Ô∏è Defendiendo con magia...");
        if (this.concentracion < COSTO_DEFENSA) {
            System.out.println("‚ùå No tienes suficiente concentraci√≥n");
        } else {
            this.concentracion -= COSTO_DEFENSA;
            System.out.println("DEFENSA aplicada con exito");
            this.setSalud(this.getSalud() + defensa);
        }
    }

    /**
     *  Ataca a un enemigo, infligiendo da√±o y lanzando un hechizo.
     *  @param enemigo El personaje enemigo al que se le va a atacar
     */
    @Override
    public void atacar(Personaje enemigo) {
        super.atacar(enemigo); // Llama al m√©todo atacar de la clase base
        System.out.println("ü™Ñ El hechicero usa magia para potenciar su ataque.");
    }

    /**
     * Lanza un hechizo, reduciendo el mana del hechicero.
     * Si no tiene suficiente mana, no puede lanzar el hechizo.
     * @param enemigo El personaje enemigo al que se le va a lanzar el hechizo.
     */
    @Override
    public void lanzarHechizo(Personaje enemigo) {
        System.out.println("‚ú® Lanzando hechizo...");
        if (this.mana < COSTO_HECHIZO) {
            System.out.println("‚ùå No tienes suficiente mana para LANZAR UN HECHIZO.");
        } else {
            this.mana -= COSTO_HECHIZO;
            enemigo.setSalud(enemigo.getSalud() - da√±oHechizo);
            System.out.println("‚úÖ Hechizo lanzado con √©xito. Mana restante: " + this.mana);
        }
    }

    /**
     * Invoca una entidad m√°gica, reduciendo la concentraci√≥n y el mana del hechicero.
     * Si no tiene suficiente concentraci√≥n o mana, no puede invocar la entidad.
     * Al invocar una entidad, se aumenta la salud y el da√±o del hechicero.
     */
    public void invocarEntidad() {
        System.out.println("üßô‚Äç‚ôÇÔ∏è Invocando entidad m√°gica...");
        if (this.concentracion < COSTO_HECHIZO  && this.mana < COSTO_HECHIZO) {
            System.out.println("‚ùå No tienes suficiente concentraci√≥n para invocar una entidad.");
        } else {
            this.concentracion -= COSTO_HECHIZO;
            this.mana -= COSTO_HECHIZO;

            // Mejoras
            // Salud
            super.setSalud(super.getSalud() + 10); // Aumenta la salud del hechicero al invocar una entidad
            // Da√±o
            maxDa√±o += 5; // Aumenta el da√±o del hechicero al invocar una entidad
            super.setDa√±o(maxDa√±o); // Aumenta el da√±o del hechicero al invocar una entidad

            System.out.println("‚úÖ Entidad m√°gica invocada con √©xito. Concentraci√≥n restante: " + this.concentracion);
        }
    }

    /**
     *  Aumenta el nivel del hechicero, incrementando su salud m√°xima, mana y sabidur√≠a.
     *  Al subir de nivel, se aumenta el da√±o del hechicero y la curaci√≥n m√°xima.
     */
    @Override
    public void subirNivel() {
        // Salud
        this.maxSalud += 4; // Aumenta la salud m√°xima al subir de nivel
        this.setSalud(maxSalud); // Restaura la salud al m√°ximo
        // Mana
        this.maxMana += 4; // Aumenta el mana m√°ximo al subir de nivel
        this.mana = maxMana; // Restaura el mana al m√°ximo
        // Sabidur√≠a
        this.maxConcentracion += 2; // Aumenta la sabidur√≠a
        this.concentracion = maxConcentracion; // Restaura la sabidur√≠a al m√°ximo
        // Da√±o del hechizo
        this.maxDa√±oHechizo += 2; // Aumenta el da√±o del hechizo
        this.da√±oHechizo = maxDa√±oHechizo; // Restaura el da√±o del hechizo al m√°ximo
        // Da√±o
        super.setDa√±o(super.getDa√±o() + 2); // Aumenta el da√±o del mago al subir de nivel
        // Defensa
        this.maxDefensa += 2; // Aumenta la curaci√≥n m√°xima al subir de nivel
        this.defensa = maxDefensa; // Restaura la curaci√≥n al m√°ximo

        super.subirNivel();
    }

    // Getters y Setters _________________
    public int getMana() {
        return mana;
    }

    public int getConcentracion() {
        return concentracion;
    }

    public void setMaxMana(int maxMana) {
        this.maxMana = maxMana;
    }

    public void setMaxSalud(int maxSalud) {
        this.maxSalud = maxSalud;
    }

    public void setMana(int mana) {
        if (mana < 0 || mana > maxMana) {
            throw new IllegalArgumentException("El mana debe estar entre 0 y " + maxMana);
        }
        this.mana = mana;
    }

    public void setConcentracion(int concentracion) {
        if (concentracion < 0 || concentracion > maxConcentracion) {
            throw new IllegalArgumentException("La concentraci√≥n debe estar entre 0 y " + maxConcentracion);
        }
        this.concentracion = concentracion;
    }
}
